using FileIO
using ImageIO
using Images

function mktile(array, sz)
    tiles = []
    for i = 1:sz:size(array, 1)
        for j = 1:sz:size(array, 2)
            tile = array[i:i+sz-1, j:j+sz-1, :]
            push!(tiles, tile)
        end
    end
    return tiles
end

# Make a SystemVerilog binary string from a single row
# Each pixel gets one bit, which is zero iff all r,g,b are nearer to 0. than 1.
function binstr(vec)
    ret = "$(size(vec, 1))'b"
    for px in vec
        r = round(Int, px.r)
        g = round(Int, px.g)
        b = round(Int, px.b)
        if (r | g | b) == 0
            ret *= "0"
        else
            ret *= "1"
        end
    end
    return ret
end

# Apply binstr upon each row in a mat, return the Vector (of strings)
function bintile(mat)
    strs = []
    for i = 1:size(mat, 1)
        row = mat[i, :, :]
        str = binstr(row) * " // 0x$(string((i-1), base=16))"
        push!(strs, str)
    end
    return strs
end

### Script:

path = joinpath(@__DIR__, "nesfont.png")
img = FileIO.load(path)

S = mktile(img, 16)

# Number of entries * rows per entry
# Assume S[1] is representative of all, this is probably ok
nw = size(S, 1) * size(S[1], 2)
ww = size(S[1], 1)

println("// +-----------------------------+")
println("// |   Generated by NesFont.jl   |")
println("// +-----------------------------+")

println("localparam [$(nw - 1):0][$(ww - 1):0] NES_FONT_ROM = {")
N = size(S, 1)
M = size(S[1], 1)
for x = 1:N
    mat = S[x]
    strvec = bintile(mat)
    for y = 1:M
        print("    ") # indentation
        print(strvec[y])
        if M == y && N == x
            println("")
        else
            println(",")
        end
    end
    if N != x
        println("")
    end
end
println("};")

nothing
